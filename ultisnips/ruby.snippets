
# vim: ft=snippets

# ==============================================================================
# ARRAY OPERATIONS
# ==============================================================================
snippet each "" w
each do |${1:element}|
	$0
end
endsnippet
snippet keep "array.keep_if" w
keep_if { |${1:element}| $1 }
endsnippet
snippet reject "array.reject" w
reject { |${1:element}| $1 }
endsnippet


# ==============================================================================
# OPTION PARSER
# ==============================================================================
snippet parse "parse arguments"
# Parse arguments
begin
	parser.parse!
rescue OptionParser::InvalidOption => e
	puts e
	puts parser
	exit 2
end
endsnippet

snippet parse "parse arguments and store passthrough arguments"
# Parse arguments
passthrough_args = Array.new
begin
	parser.parse!(ARGV)
rescue OptionParser::InvalidOption => e
	passthrough_args += e.args
	passthrough_args.append(ARGV.shift) if ARGV.first =~ /^[^-]/
	retry
end
endsnippet


# ==============================================================================
# MISCELLANEOUS
# ==============================================================================

# raise is not a good command to use for tools
# - stacktrace dumps can confuse users
snippet raise ""
$stderr.puts "ERROR: $1"
exit 2
endsnippet
snippet err "" b
$stderr.puts "ERROR: $1"
endsnippet

snippet hostname "" w
require 'socket'
hostname = Socket.gethostbyname(Socket.gethostname()).first
endsnippet

snippet whoami "" w
require 'etc'
Etc.getpwuid(Process.uid).name
endsnippet

snippet printf_hash "use format specifiers to print hash" b
def printf_hash(info, format = '%10b %3r %3p %3d')
	return format.gsub(/%(\d*)([brpd])/) do |match|
		info[\$2].to_s.ljust(\$1.to_i)
	end
end
endsnippet

snippet rescue "" b
rescue => error
	puts error.message
	puts error.backtrace
	puts error.backtrace.inspect
end
endsnippet

snippet # "" i
#{$1}
endsnippet

snippet log "" b
$stdout = Class.new do
	def initialize
		basename = File.basename($0, File.extname($0))
		now = Time.now.strftime('%Y%m%d-%H%M%S')
		@f = File.open("#{basename}-#{now}.log", "w")
		@stdout = $stdout
	end
	def write(string)
		@f.write string
		@stdout.write string
	end
end.new
endsnippet

