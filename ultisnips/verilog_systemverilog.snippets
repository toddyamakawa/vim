
# vim: ft=snippets

# REVISIT: This stuff doesn't appear to be working
#extends systemverilog
#extends verilog

snippet class "class" b
class ${1:class_name} extends ${2:uvm_object};
	uvm_component_utils($1)
endclass : $1
endsnippet

snippet extern "extern function" b
extern function ${1:function_name}($0);
endsnippet

snippet extern "extern task" b
extern task ${1:task_name}($0);
endsnippet

snippet function "function" b
function ${1:function_name}();
endfunction : $1
endsnippet

snippet task "task" b
task ${1:task_name}();
endtask : $1
endsnippet

snippet new "new() function prototype" b
extern function new(string name="", uvm_component parent=null);
endsnippet

snippet new "new() function definition" b
function ${1:class_name}::new(string name="", uvm_component parent=null);
	super.new(name, parent);
endfunction : new
endsnippet

snippet if "if"
if(${1}) begin
	${0}
end
endsnippet

snippet eif "else if"
else if(${1}) begin
	${0}
end
endsnippet

snippet el
else begin
	${0}
end
endsnippet

snippet begin
begin
	$0
end
endsnippet

# ==============================================================================
# LOOPS
# ==============================================================================
snippet fori "for(int i = 0; i < count; i++)" b
for(int i = 0; i < ${1:count}; i++) begin
	$display("count=%0d", i);
end
endsnippet

snippet foreach "foreach" b
foreach(${1:array}[${2:i}]) begin
	$display("$1[%0d]=0x%x", $2, $1[$2]);
end
endsnippet

# ==============================================================================
# $FUNCTIONS
# ==============================================================================
snippet disp "display"
$display(${1:"string"});
endsnippet

snippet ps "psprintf" w
$psprintf("${1:%d}", $2)
endsnippet


# ==============================================================================
# DIRECTIVES
# ==============================================================================
snippet include "include" b
\`include "${1:file.sv}"
endsnippet

snippet define "define" b
\`define ${1:MACRO_NAME} ${2:value}
endsnippet

snippet ifdef "ifdef" b
\`ifdef ${1:MACRO_NAME}
	${0}
\`endif // \`ifdef $1
endsnippet

snippet ifndef "ifndef" b
\`ifndef ${1:MACRO_NAME}
\`define $1
	${0}
\`endif // \`ifndef $1
endsnippet

snippet " "" i
"$1"
endsnippet

snippet ( "" i
($1)
endsnippet



# ==============================================================================
# RANDOMIZATION
# ==============================================================================
snippet constraint "constraint" b
constraint c_${1:constraint_name} {
	$1 dist {
	};
}
endsnippet


# ==============================================================================
# COVERAGE
# ==============================================================================
snippet cg "covergroup" b
covergroup cg_${1:covergroup_name};
endgroup : cg_$1
endsnippet

snippet cg "covergroup with sample()" b
covergroup cg_${1:covergroup_name} with function sample(${2:inputs});
endgroup : cg_$1
endsnippet

snippet cp "coverpoint" b
cp_${1:coverpoint_name} : coverpoint ${2:variable} iff(${3:expression})
{
}
endsnippet


# ==============================================================================
# COMMENTS
# ==============================================================================
snippet todo "TODO comment"
// TODO: $1
endsnippet

snippet revisit "REVISIT comment"
// REVISIT: $1
endsnippet

# ==============================================================================
# ARM-STUFF
# ==============================================================================
snippet arminfo "" b
\`arm_info(${1:"info message"});
endsnippet

snippet armdebug "" b
\`arm_debug(${1:"debug message"});
endsnippet

snippet armfail "description" b
\`arm_fail_info(${1:"fail message"});
endsnippet

snippet armfatal "definition" b
\`arm_tb_fatal(${1:"fatal message"});
endsnippet

